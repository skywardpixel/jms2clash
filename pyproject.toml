[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "jms2clash"
version = "0.1.2"
description = "Convert JMS subscription strings to Clash configuration files optimized for Chinese users"
readme = "README.md"
license = "MIT"
authors = [{ name = "JMS Converter Team" }]
keywords = [
    "clash",
    "proxy",
    "vmess",
    "vless",
    "shadowsocks",
    "trojan",
    "china",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: System :: Networking",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = ["PyYAML>=6.0"]

[project.optional-dependencies]
dev = ["pytest>=6.0", "pytest-cov>=2.12", "black>=22.0", "ruff>=0.1.0"]
build = ["pyinstaller>=5.0"]

[project.urls]
Homepage = "https://github.com/skywardpixel/jms2clash"
Repository = "https://github.com/skywardpixel/jms2clash"
Issues = "https://github.com/skywardpixel/jms2clash/issues"

[project.scripts]
jms2clash = "src.jms_to_clash:main"

[tool.hatch.build.targets.sdist]
include = ["src/", "README.md"]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests", "."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["-v", "--tb=short", "--strict-markers", "--disable-warnings"]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["B011"] # assert False in tests is ok

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
