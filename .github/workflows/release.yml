name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v0.1.0)"
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv venv --python ${{ matrix.python-version }}
          uv pip install -e ".[dev]"

      - name: Run tests
        run: uv run pytest test_jms_to_clash.py -v

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: jms2clash
            asset_name: jms2clash-linux-x64
            platform: linux-x64
          - os: windows-latest
            artifact_name: jms2clash.exe
            asset_name: jms2clash-windows-x64.exe
            platform: windows-x64
          - os: macos-13
            artifact_name: jms2clash
            asset_name: jms2clash-macos-x64
            platform: macos-x64
          - os: macos-14
            artifact_name: jms2clash
            asset_name: jms2clash-macos-arm64
            platform: macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[build]"

      - name: Build binary
        run: |
          uv run pyinstaller --onefile --name jms2clash --console \
            --add-data "README.md:." \
            --hidden-import yaml \
            --optimize 2 \
            --strip \
            src/jms_to_clash.py

      - name: Test binary (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x dist/${{ matrix.artifact_name }}
          echo "vmess://eyJhZGQiOiJleGFtcGxlLmNvbSIsImFpZCI6IjAiLCJpZCI6InRlc3QiLCJuZXQiOiJ0Y3AiLCJwb3J0IjoiNDQzIiwicHMiOiJUZXN0Iiwic2N5IjoiYXV0byIsInRscyI6InRscyIsInYiOiIyIn0=" | dist/${{ matrix.artifact_name }} --version

      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "vmess://eyJhZGQiOiJleGFtcGxlLmNvbSIsImFpZCI6IjAiLCJpZCI6InRlc3QiLCJuZXQiOiJ0Y3AiLCJwb3J0IjoiNDQzIiwicHMiOiJUZXN0Iiwic2N5IjoiYXV0byIsInRscyI6InRscyIsInYiOiIyIn0=" | dist\${{ matrix.artifact_name }} --version

      - name: Create platform package
        shell: bash
        run: |
          mkdir -p package
          cp dist/${{ matrix.artifact_name }} package/
          cp README.md package/
          cp LICENSE package/
          echo "# JMS to Clash Converter - ${{ matrix.platform }}" > package/INSTALL.md
          echo "" >> package/INSTALL.md
          echo "## Quick Start" >> package/INSTALL.md
          echo "" >> package/INSTALL.md
          if [ "${{ runner.os }}" = "Windows" ]; then
            echo "1. Extract the files from the archive" >> package/INSTALL.md
            echo "2. Open Command Prompt or PowerShell in the extracted directory" >> package/INSTALL.md
            echo "3. Run: \`echo \"subscription_content\" | ${{ matrix.artifact_name }} > config.yaml\`" >> package/INSTALL.md
          else
            echo "1. Extract the files from the archive" >> package/INSTALL.md
            echo "2. Make the binary executable: \`chmod +x ${{ matrix.artifact_name }}\`" >> package/INSTALL.md
            echo "3. Run: \`echo \"subscription_content\" | ./${{ matrix.artifact_name }} > config.yaml\`" >> package/INSTALL.md
          fi
          echo "" >> package/INSTALL.md
          echo "## Examples" >> package/INSTALL.md
          echo "" >> package/INSTALL.md
          echo "\`\`\`bash" >> package/INSTALL.md
          echo "# Convert subscription from URL" >> package/INSTALL.md
          echo "curl -s \"https://your-subscription-url\" | ./${{ matrix.artifact_name }} > config.yaml" >> package/INSTALL.md
          echo "" >> package/INSTALL.md
          echo "# Convert from file" >> package/INSTALL.md
          echo "./${{ matrix.artifact_name }} < subscription.txt > config.yaml" >> package/INSTALL.md
          echo "\`\`\`" >> package/INSTALL.md

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd package
          tar -czf ../${{ matrix.asset_name }}.tar.gz *

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd package
          Compress-Archive -Path * -DestinationPath ../${{ matrix.asset_name }}.zip

      - name: Upload artifact (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.tar.gz

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Copy platform archives
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;

          # List what we have
          ls -la release-assets/

          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          VERSION_TAG="${{ steps.get_version.outputs.version }}"

          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \[/ {
              if (found) exit;
              if ($0 ~ /'"$VERSION_TAG"'/) { found=1; next }
            }
            found && !/^## \[/ { print }
            ' CHANGELOG.md > current_changelog.txt

            # If changelog is empty, create a basic one
            if [ ! -s current_changelog.txt ]; then
              echo "### What's New in $VERSION_TAG" > current_changelog.txt
              echo "" >> current_changelog.txt
              echo "See the full changelog in CHANGELOG.md" >> current_changelog.txt
            fi
          else
            echo "### 🚀 JMS to Clash Converter $VERSION_TAG" > current_changelog.txt
            echo "" >> current_changelog.txt
            echo "Convert JMS subscription strings to Clash configuration files optimized for Chinese users." >> current_changelog.txt
            echo "" >> current_changelog.txt
            echo "#### ✨ Features" >> current_changelog.txt
            echo "- Support for VMess, VLESS, Shadowsocks, and Trojan protocols" >> current_changelog.txt
            echo "- Chinese-optimized DNS and routing rules" >> current_changelog.txt
            echo "- Automatic proxy group configuration" >> current_changelog.txt
            echo "- Base64 encoded subscription parsing" >> current_changelog.txt
            echo "" >> current_changelog.txt
          fi

          # Add platform information
          echo "" >> current_changelog.txt
          echo "#### 📦 Available Platforms" >> current_changelog.txt
          echo "- **Linux x64**: \`jms2clash-linux-x64.tar.gz\`" >> current_changelog.txt
          echo "- **Windows x64**: \`jms2clash-windows-x64.exe.zip\`" >> current_changelog.txt
          echo "- **macOS x64**: \`jms2clash-macos-x64.tar.gz\`" >> current_changelog.txt
          echo "- **macOS ARM64**: \`jms2clash-macos-arm64.tar.gz\`" >> current_changelog.txt
          echo "" >> current_changelog.txt
          echo "#### 🚀 Quick Start" >> current_changelog.txt
          echo "1. Download the archive for your platform" >> current_changelog.txt
          echo "2. Extract the files" >> current_changelog.txt
          echo "3. Run: \`curl -s \"subscription-url\" | ./jms2clash > config.yaml\`" >> current_changelog.txt
          echo "" >> current_changelog.txt
          echo "#### 🔍 Verification" >> current_changelog.txt
          echo "Use the provided \`checksums.txt\` to verify file integrity:" >> current_changelog.txt
          echo "\`\`\`bash" >> current_changelog.txt
          echo "sha256sum -c checksums.txt" >> current_changelog.txt
          echo "\`\`\`" >> current_changelog.txt

          echo "Generated changelog:"
          cat current_changelog.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: current_changelog.txt
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install build dependencies
        run: |
          uv venv
          uv pip install build twine

      - name: Build package
        run: |
          uv run python -m build

      - name: Check package
        run: |
          uv run twine check dist/*.whl dist/*.tar.gz

      - name: Publish to PyPI
        if: success()
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload dist/*.whl dist/*.tar.gz
